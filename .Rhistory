library(swirl)
swirl()
library(MASS)
shuttleData<-MASS::shuttle
fit1<-glm(use~wind,family=binomial, data=shuttleData)
exp(summary(fit1)$coef)
fit1<-glm(use~wind+magn,family=binomial, data=shuttleData)
exp(summary(fit1)$coef)
fit1<-glm(count~spray,family=binomial, data=InsectSprays)
fit1<-glm(count~spray,family=poisson, data=InsectSprays)
exp(summary(fit1)$coef)
data<-mtcars
View(data)
View(data)
install.packages(c("caret", "caTools", "clipr", "data.table", "ddalpha", "digest", "dplyr", "evaluate", "foreign", "ggplot2", "git2r", "glue", "haven", "httpuv", "kernlab", "later", "MASS", "mgcv", "openxlsx", "pillar", "purrr", "quantreg", "Rcpp", "RcppRoll", "RCurl", "rlang", "robustbase", "shiny", "sourcetools", "sp", "spam", "stringi", "survival", "tidyr", "utf8", "yaml"))
install.packages(c("caret", "caTools", "data.table", "ddalpha", "digest", "dplyr", "fansi", "foreign", "git2r", "glue", "haven", "httpuv", "kernlab", "later", "MASS", "mgcv", "openxlsx", "purrr", "quantreg", "Rcpp", "RcppRoll", "RCurl", "rlang", "robustbase", "shiny", "sourcetools", "sp", "spam", "stringi", "survival", "tidyr", "utf8", "yaml"))
library(AppliedPredictiveModelling)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
g<-ggplot(data=concrete)+geom_point(CompressiveStrength, colours=)
g<-ggplot(data=concrete)+geom_point(CompressiveStrength)
g<-ggplot(data=concrete)
g
g<-g+geom_point(CompressiveStrength)
g<-g+geom_point(CompressiveStrength, data=concrete)
View(concrete)
View(concrete)
g<-ggplot(data=concrete, aes(x=FlyAsh, y=CompressiveStrength))+geom_point()
g
g<-ggplot(data=concrete, aes(x=., y=CompressiveStrength))+geom_point()
g
g<-ggplot(data=concrete, aes(x=index,y=CompressiveStrength))+geom_point()
g
g<-ggplot(data=concrete, aes(y=CompressiveStrength))+geom_point()
g
plot(concrete$CompressiveStrength)
histogram(concrete$Superplasticizer)
histogram(log(concrete$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(adData,method="pca")
preProcess(adData,method="pca",thresh=0.9)
preProcess(training,method="pca",thresh=0.9)
View(training)
View(training)
View(training)
View(training)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training,method="pca",thresh=0.9)
preProcess(training[58:69,],method="pca",thresh=0.9)
training = training[58:69,]
testing = testing[58:69],]
training = training[58:69,]
testing = testing[58:69,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[58:69,]
testing = testing[58:69,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,58:69]
testing = testing[,58:69]
preProcPCA<-preProcess(training,method="pca",thresh=0.8)
trainingOutputPCA<-train(training,method="glm",preProcess="method="pca",thresh=0.8")
trainingOutputPCA<-train(training,method="glm",preProcess=c("method=pca","thresh=0.8")
)
View(adData)
View(adData)
trainingOutputPCA<-train(diagnosis~.,training,method="glm",preProcess=c("method=pca","thresh=0.8"))
> training = adData[ inTrain,]
> testing = adData[-inTrain,]
> training = training[,1+58:69]
> testing = testing[,1+58:69]
> training = adData[ inTrain,]
> testing = adData[-inTrain,]
> training = training[,1-58:69]
> testing = testing[,1-58:69]
> training = adData[ inTrain,]
> testing = adData[-inTrain,]
> training = training[,y %in% c(1,58:69)]
> testing = testing[,y %in% c(1,58:69)]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,y %in% c(1,58:69)]
testing = testing[,y %in% c(1,58:69)]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,training$y %in% c(1,58:69)]
testing = testing[,testing$y %in% c(1,58:69)]
trainingOutputPCA<-train(diagnosis~.,training,method="glm",preProcess=c("method=pca","thresh=0.8"))
trainingOutputPCA<-train(diagnosis~.,data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
trainingOutputPCA<-train(diagnosis ~ .,data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
trainingOutputPCA<-train(diagnosis ~ .,data=training,method="glm")
library(caret)
trainingOutputPCA<-train(diagnosis ~ .,data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
trainingOutputPCA<-train((diagnosis ~ .),data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
View(training)
View(training)
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,training$y %in% c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
testing = testing[,testing$y %in% c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,y %in% c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
testing = testing[,y %in% c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training = training[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
testing = testing[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
trainingOutputPCA<-train((diagnosis ~ .),data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
install.packages("e1071")
trainingOutputPCA<-train((diagnosis ~ .),data=training,method="glm",preProcess=c("method=pca","thresh=0.8"))
library(swirl)
swirl()
data("iris")
library(ggplot2)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <-iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species,data=trainig)
qplot(Petal.Width, Sepal.Width, colour=Species,data=training)
modFit<-train(Species~. method="rpart",data=training)
modFit<-train(Species~., method="rpart",data=training)
print
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
test(modFit$finalModel,use.n=TRUE,all=TRUE, cex=.8)
text(modFit$finalModel,use.n=TRUE,all=TRUE, cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
predict(modFit,newData=testing)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone<-ozone[order(ozone$ozone),]
head(ozone)
ll<- matrix(NA,nrow=10,ncol=155)
ctreeBag$fit
ctreeBag$pred
ctreeBag$aggregate
modFit<-train(Species].,data=training,method="rf",prox=TRUE)
modFit<-train(Species~.,data=training,method="rf",prox=TRUE)
modFit<-train(Species~.,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
pred<-predict(modFit,testing); testing$predRight
library(ISLR)
install.packages("ISLR")
library(ISLR)
data("Wage")
Wage<-subset(Wage, select=-c(logwage))
intTrain<- createDataPartition(Y=Wage$wage, p=0.7,list=FALSE)
intTrain<- createDataPartition(y=Wage$wage, p=0.7,list=FALSE)
training<-Wage[intTrain,]
testing<-Wage[-intTrain,]
modFit<-train(wage].,method="gbm",data=training, verbose=FALSE)
modFit<-train(wage~.,method="gbm",data=training, verbose=FALSE)
print(modFit)
qplot(predict(modFit, testing),wage,data=testing)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
modlda<-train(Specias~.,data=training,method="lda")
modlda<-train(Species~.,data=training,method="lda")
modnb<-train(Species~.,data=training,method="nb")
plda=predict(modlda,testing);pnb=predict(modnb,testing)
table(plda,pnb)
equalPredictions=(plda=pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
equalPredictions=(plda==pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
install.packages(c("AppliedPredictiveModeling", "pgmm", "rpart"))
install.packages(c("AppliedPredictiveModeling", "pgmm", "rpart"))
install.packages(c("AppliedPredictiveModeling", "pgmm", "rpart"))
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF<-train(diagnosis~.,data=training,method="rf")
modGBM<-train(diagnosis~.,data=training,method="gbm")
modLDA<-train(diagnosis~.,data=training,method="lda")
secondBit = data.frame(modRF,modGBM,modLDA,training$diagnosis)
predRF<-predict(modRF,testing);predGBM<-predict(modGBM,testing);predLDA<-predict(modLDA,testing)
predDF<-data.frame(predRF,predGBM,predLDA,testing$diagnosis)
comModFit<-train(diagnosis~.,data=predDF,method="rf")
predDF<-data.frame(predRF,predGBM,predLDA,diagnosis=testing$diagnosis)
comModFit<-train(diagnosis~.,data=predDF,method="rf")
comPred<-predict(comModFit,predDF)
confusionMatrix(comPred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(concrete)
View(concrete)
modLasso <-train(CompressiveStrength~.,data<-training,method="Lasso")
modLasso <-train(CompressiveStrength~.,data<-training,method="lasso")
modLasso <-train(CompressiveStrength~.,data<-training,method="lasso")
View(modLasso)
View(modLasso)
?plot.enet
plot.enet(modLAsso)
View(modLasso)
plot.enet(modLasso)
enet(modLasso)
elasticnet::plot.enet(modLasso)
modLasso <-train(CompressiveStrength~.,data=training,method="lasso")
elasticnet::plot.enet(modLasso)
View(modLasso)
View(modLasso)
modTrain <-train(CompressiveStrength~.,data=training,method="lasso")
library(lubridate) # For year() function below
dat = read.csv("C:/Users/hugo/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
modTime<-bats(training)
library(forecast)
modTime<-bats(training)
modTime<-bats(tstrain)
predTime<-predict(modTime, testing)
predTime<-predict(modTime, ts(testing)
)
predTime<-forecast(modTime)
accuracy-(predTime,testing)
accuracy(predTime,testing)
accuracy(predTime,testing$visitsTumblr)
predTime<-forecast(modTime,testing$date)
predTime<-forecast(modTime,testing$X)
tstest<-ts(testing$date,testing$visitsTumblr)
predTime<-forecast(modTime,tstest)
tstrain
tstest<-ts(testing$visitsTumblr)
predTime<-forecast(modTime,tstest)
predTime<-forecast(modTime)
plot(predTime);lines(tststest,col=red)
plot(predTime);lines(tstest,col=red)
plot(predTime);lines(tstest,col="red")
tstest<-ts(testing$date,testing$visitsTumblr)
plot(predTime);lines(tstest,col="red")
tstest<-ts(testing$X,testing$visitsTumblr)
plot(predTime);lines(tstest,col="red")
accuracy(predTime,tstest)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modSVM<-pred(CompressiveStrength~.,data=training,method="SVM")
modSVM<-predict(CompressiveStrength~.,data=training,method="SVM")
modSVM<-svm(CompressiveStrength~.,data=training)
libary(e1071)
library(e1071)
modSVM<-svm(CompressiveStrength~.,data=training)
predict(modSVM,testing)
accuracy(predict(modSVM,testing),testing$CompressiveStrength)
library(shiny)
runApp('F:/shinyRTestProjects/testProjectSlider/sliderTestCase')
runApp('F:/shinyRTestProjects/testProjectSlider/sliderTestCase')
runApp('F:/Developing_Data_Products/Shiny_Part_1/app4')
runApp('F:/Developing_Data_Products/Shiny_Part_1/app4')
runApp('F:/Developing_Data_Products/Shiny_Part_1/app4')
runApp('F:/Developing_Data_Products/Shiny_Part_2/app1')
runApp('F:/Developing_Data_Products/Shiny_Part_2/app2')
runApp('F:/Developing_Data_Products/Shiny_Part_2/app2')
runApp('F:/Developing_Data_Products/Shiny_Part_2/app3')
runApp('F:/Developing_Data_Products/Shiny_Part_2/app4')
library(miniUI)
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
runGadget(ui, server)
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
}
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget()
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
}
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget()
multiplyNumbers(1:10,1:10)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
}
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
}
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
multiplyNumbers(1:10,1:10)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
M
plot(M)
plot(M)
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(N)
plot(M)
install.packages(c("cairoDevice", "caTools", "data.table", "dotCall64", "e1071", "fansi", "forecast", "foreign", "git2r", "haven", "maptools", "mgcv", "openssl", "openxlsx", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "sourcetools", "sp", "spam", "tseries", "utf8", "XML", "xts", "zoo"))
install.packages("installr")
install.packages(c("stringi", "stringr", "installr"))
install.packages(c("yaml", "installr"))
library(r)
library(installr)
updateR()
trainingFile <- "./pml-training.csv"
testingFile <- "./pml-testing.csv"
trainingSet <- read.csv(trainingFile);
testingSet <- read.csv(testingFile);
pwd
pwd()
setwd("F:\PracticalMachineLearningProject")
setwd("F:/PracticalMachineLearningProject")
trainingSet <- read.csv(trainingFile);
testingSet <- read.csv(testingFile);
install.packages("e1071")
install.packages(c("randomForest", "gbm", "dplyr"))
View(testingSet)
View(testingSet)
View(trainingSet)
View(trainingSet)
nearZeroVarStore<-nearZeroVar(trainingSet,saveMetrics=TRUE)
library(caret)
nearZeroVarStore<-nearZeroVar(trainingSet,saveMetrics=TRUE)
nearZeroVarStore<-nearZeroVar(trainingSet,saveMetrics=TRUE)
filtTraining<-trainingSet[,!nearZeroVarStore$nzv]
filtTesting<-testingSet[,!nearZeroVarStore$nzv]
filtTraining<-filtTraining[,grep("accel", names(filtTraining), value=TRUE)]
filtTesting<-filtTesting[,grep("accel", names(filtTraining), value=TRUE)]
View(filtTraining)
View(filtTraining)
nearZeroVarStore<-nearZeroVar(trainingSet,saveMetrics=TRUE)
filtTraining<-trainingSet[,!nearZeroVarStore$nzv]
filtTesting<-testingSet[,!nearZeroVarStore$nzv]
filtTraining<-filtTraining[,grep("accel", names(filtTraining), value=TRUE)]
filtTesting<-filtTesting[,grep("accel", names(filtTraining), value=TRUE)]
nans<-(colSums(is.na(filtTraining))==0)
filtTraining<-filtTraining[,nans]
filtTesting<-filtTesting[,nans]
nearZeroVarStore<-nearZeroVar(trainingSet,saveMetrics=TRUE)
filtTraining<-trainingSet[,!nearZeroVarStore$nzv]
filtTesting<-testingSet[,!nearZeroVarStore$nzv]
filtTraining<-filtTraining[,grep("accel|classe", names(filtTraining), value=TRUE)]
filtTesting<-filtTesting[,grep("accel|classe", names(filtTesting), value=TRUE)]
View(filtTesting)
View(filtTesting)
View(testingSet)
View(testingSet)
install.packages(c("glm.predict", "glm2"))
install.packages("rattle")
